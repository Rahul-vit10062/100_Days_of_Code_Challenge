Question:-
          Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
          If target is not found in the array, return [-1, -1].
          You must write an algorithm with O(log n) runtime complexity.
          
Test Case 1:
          Input: nums = [5,7,7,8,8,10], target = 8
          Output: [3,4]

Test Case 2:
          Input: nums = [5,7,7,8,8,10], target = 6
          Output: [-1,-1]
          
Test Case 3:
          Input: nums = [], target = 0
          Output: [-1,-1]
 
Constraints:
          0 <= nums.length <= 105
          -109 <= nums[i] <= 109
          nums is a non-decreasing array.
          -109 <= target <= 109
          
Logics:-
          class Solution {
    public int[] searchRange(int[] nums, int target) {
                int[] result={firstoccurance(nums,target),lastoccurance(nums,target)};
        return result;
    }
    int firstoccurance(int[] nums, int target) {
        int start=0, end=nums.length-1,mid,ans=-1;
        while(start<=end){
            mid=start+((end-start)/2);
            if(nums[mid]==target){
                ans=mid;
                end=mid-1;
            }
            else if(nums[mid]>target){
                end=mid-1;
            }
            else if(nums[mid]<target){
                start=mid+1;
            }
        }
        return ans;
    }
    
    int lastoccurance(int[] nums, int target) {
        int start=0, end=nums.length-1,mid,ans=-1;
        while(start<=end){
            mid=start+((end-start)/2);
            if(nums[mid]==target){
                ans=mid;
                start=mid+1;
            }
            else if(nums[mid]>target){
                end=mid-1;
            }
            else if(nums[mid]<target){
                start=mid+1;
            }
        }
        return ans;  
    }
}
