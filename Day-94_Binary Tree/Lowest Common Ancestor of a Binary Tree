Question:
          Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
          According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Test Case 1:
          Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
            Output: 3
            Explanation: The LCA of nodes 5 and 1 is 3.
            
Test case 2:
            Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
            Output: 5
            Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

Constraints:
            The number of nodes in the tree is in the range [2, 105].
            -109 <= Node.val <= 109
            All Node.val are unique.
            p != q
            p and q will exist in the tree.
            
Logics:
            /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public static boolean getPath(TreeNode root, TreeNode n, ArrayList<TreeNode> list){
        if(root == null){
            return false;
        }

        list.add(root);

        if(root.val == n.val){
            return true;
        }
        boolean foundLeft = getPath(root.left,n,list);
        boolean foundRight = getPath(root.right,n,list);

        if(foundLeft || foundRight){
            return true;

        }
        list.remove(list.size()-1);
        return false;
       }
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        ArrayList<TreeNode> path1 = new ArrayList<>();
        ArrayList<TreeNode> path2 = new ArrayList<>();

        getPath(root, p, path1);
        getPath(root, q,path2);

        //lca
           int i=0;
           for(; i<path1.size() && i<path2.size();i++){
               if(path1.get(i) != path2.get(i)){
                   break;
               }
           }
           TreeNode lca = path1.get(i-1);
           return lca;
    }
}
