Question :-
            You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in 
            nums1 and nums2 respectively.
            
Test Case 1:
            Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
            Output: [1,2,2,3,5,6]
Explanation: 
            The arrays we are merging are [1,2,3] and [2,5,6].
            The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

Test Case 2:
            Input: nums1 = [1], m = 1, nums2 = [], n = 0
            Output: [1]
Explanation: 
            The arrays we are merging are [1] and [].
            The result of the merge is [1].
Test Case 3:
            Input: nums1 = [0], m = 0, nums2 = [1], n = 1
            Output: [1]
Explanation: 
            The arrays we are merging are [] and [1].
            The result of the merge is [1].
            Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
 

Constraints:
            nums1.length == m + n
            nums2.length == n
            0 <= m, n <= 200
            1 <= m + n <= 200
            -109 <= nums1[i], nums2[j] <= 109
            
Logics:-
            class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int k = nums1.length - 1;
        int i = m - 1;
        int j = n - 1;
        
        while(j>=0)
        {
            if(i>=0 && nums1[i] > nums2[j])
            {
                nums1[k] = nums1[i];
                k--;
                i--;
            }
            else
            {
                nums1[k] = nums2[j];
                k--;
                j--;
            }
        }
    }
}
