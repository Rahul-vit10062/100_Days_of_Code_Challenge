Question:-
          Given an m x n grid of characters board and a string word, return true if word exists in the grid.
          The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. 
          The same letter cell may not be used more than once.
          
Test Case 1:
          Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
          Output: true
Test Case 2:
          Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
          Output: true
Test Case 3:
          Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
          Output: false
 

Constraints:
          m == board.length
          n = board[i].length
          1 <= m, n <= 6
          1 <= word.length <= 15
          board and word consists of only lowercase and uppercase English letters.
          
Logics:-
          class Solution {
    public boolean exist(char[][] board, String word) {
     for(int i=0; i<board.length; i++)
        {
            for(int j=0; j<board[0].length; j++)
            {
                if(board[i][j]==word.charAt(0)){
                 if(helper(board,word,0,i,j,board.length,board[0].length))
                     return true;
                }
            }
        }
       return false;
    }
    boolean helper(char[][] board, String word,int index,int i,int j, int rowLen,int colLen)
    {
    
        if(index==word.length())
        return true;
        
        if(i<0 || j<0 || i == rowLen || j == colLen || board[i][j] != word.charAt(index))
            return false;
        
		
            char temp = board[i][j];
            board[i][j] = '#';
            boolean ans1 = helper(board,word,index+1,i,j+1,rowLen,colLen);
            boolean ans2 = helper(board,word,index+1,i+1,j,rowLen,colLen);
            boolean ans3 = helper(board,word,index+1,i-1,j,rowLen,colLen);
            boolean ans4 = helper(board,word,index+1,i,j-1,rowLen,colLen);
            board[i][j] = temp;
            return ans1 || ans2 || ans3 || ans4;
        
    
    }
}
