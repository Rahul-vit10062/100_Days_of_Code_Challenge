Question:
          You are given an array of positive integers price where price[i] denotes the price of the ith candy and a positive integer k.
          The store sells baskets of k distinct candies. The tastiness of a candy basket is the smallest absolute difference of the prices of any two candies in the basket.
          Return the maximum tastiness of a candy basket.
          
Test Case 1:
          Input: price = [13,5,1,8,21,2], k = 3
          Output: 8
          Explanation: Choose the candies with the prices [13,5,21].
          The tastiness of the candy basket is: min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8.
          It can be proven that 8 is the maximum tastiness that can be achieved.
          
Test Case 2:
          Input: price = [1,3,1], k = 2
          Output: 2
          Explanation: Choose the candies with the prices [1,3].
          The tastiness of the candy basket is: min(|1 - 3|) = min(2) = 2.
          It can be proven that 2 is the maximum tastiness that can be achieved.
          
Constraints:
          2 <= k <= price.length <= 105
          1 <= price[i] <= 109
          
Logics:
          class Solution {
    public int maximumTastiness(int[] price, int k) {
       Arrays.sort(price);
        int low = 0, high = Integer.MAX_VALUE, mid;

        while (low <= high) {
            mid = (low + high) / 2;
            if (isPossible(price, k, mid)) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return high;
    }

    boolean isPossible(int[] price, int k, int x) {
        int last = price[0], count = 1, i = 1;
        while ( i < price.length) {
            if (price[i] - last >= x) {
                last = price[i]; count++;
            }
            i++;
            if(count>=k) {
                return true;
            }
        }
        return count >= k;
    }
}
