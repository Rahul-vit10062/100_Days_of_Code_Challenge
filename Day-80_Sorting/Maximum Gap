Quesation:
          Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.
          You must write an algorithm that runs in linear time and uses linear extra space.
          
Test Case 1:
          Input: nums = [3,6,9,1]
          Input: nums = [3,6,9,1]
          Output: 3
          Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.
          
Test Case 2:
          Input: nums = [10]
          Output: 0
          Explanation: The array contains less than 2 elements, therefore return 0.
          
Constraints:
          1 <= nums.length <= 105
          0 <= nums[i] <= 109
          
 Logics:
          class Solution {
    public int maximumGap(int[] nums) {
        if(nums.length==1){
            return 0;
        }
        int max=Integer.MIN_VALUE;
        int min=Integer.MAX_VALUE;
        int n=nums.length;
        
        for(int num: nums){
            max=Math.max(max,num);
            min=Math.min(min,num);
        }
        if(max==min){
            return 0;
        }
        int avgGap=(int)Math.ceil((double)(max-min)/(n-1));
        int bucketCount=(max-min+1)/avgGap+1;
        int[] minBucket=new int[bucketCount];
        int[] maxBucket=new int[bucketCount];
        
        Arrays.fill(maxBucket, -1);
        Arrays.fill(minBucket, Integer.MAX_VALUE);
        
        for(int num: nums){
            int bucketIdx=(num-min)/avgGap;
            
            minBucket[bucketIdx]=Math.min(minBucket[bucketIdx],num);
            maxBucket[bucketIdx]=Math.max(maxBucket[bucketIdx],num);
        }
        
        int maxGap=avgGap;
        int prev=-1;
        for(int i=0;i<bucketCount;i++){
            if(maxBucket[i]==-1){
                continue;
            }else if(prev!=-1){
                maxGap=Math.max(maxGap,minBucket[i]-prev);
            }
            prev=maxBucket[i];
        }
        return maxGap;
    }
}
