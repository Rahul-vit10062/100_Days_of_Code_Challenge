Question:-
          You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] 
          represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. 
          You are also given an interval newInterval = [start, end] that represents the start and end of another interval.

          Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals 
          still does not have any overlapping intervals (merge overlapping intervals if necessary).

          Return intervals after the insertion.
          
Test Case 1:
          Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
          Output: [[1,5],[6,9]]
Test Case 2:
          Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
          Output: [[1,2],[3,10],[12,16]]
Explanation: 
          Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
          
Constraints:
          0 <= intervals.length <= 104
          intervals[i].length == 2
          0 <= starti <= endi <= 105
          intervals is sorted by starti in ascending order.
          newInterval.length == 2
          0 <= start <= end <= 105
          
Logics:
        class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
                List<int[]> res = new ArrayList<>();
        int n = intervals.length;
        for(int i=0; i<n; i++){
            if(intervals[i][1] < newInterval[0]){
                //they are non-overlapping
                res.add(new int[]{intervals[i][0], intervals[i][1]});
            }
            else if(intervals[i][0] > newInterval[1]){
                //they are non-overlapping
                res.add(new int[]{newInterval[0], newInterval[1]});
                for(int j=i; j<n; j++){
                    res.add(new int[]{intervals[j][0], intervals[j][1]});
                }
                int ans[][] = new int[res.size()][2];
                for(int k=0; k<res.size(); k++){
                    ans[k][0] = res.get(k)[0];
                    ans[k][1] = res.get(k)[1];
                }
                return ans;
            }
            else{
                //they are overlapping
                newInterval[0] = Math.min(intervals[i][0], newInterval[0]);
                newInterval[1] = Math.max(intervals[i][1], newInterval[1]);
            }
        }
        res.add(new int[]{newInterval[0], newInterval[1]});
        int ans[][] = new int[res.size()][2];
        for(int i=0; i<res.size(); i++){
            ans[i][0] = res.get(i)[0];
            ans[i][1] = res.get(i)[1];
        }
        return ans;
    }
}

