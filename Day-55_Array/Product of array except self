Question:
        Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
        The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
        You must write an algorithm that runs in O(n) time and without using the division operation.
        
Test Case 1:
            Input: nums = [1,2,3,4]
            Output: [24,12,8,6]
            
Test Case 2:
            Input: nums = [-1,1,0,-3,3]
            Output: [0,0,9,0,0]
            
Constraints:
            2 <= nums.length <= 105
            -30 <= nums[i] <= 30
            The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
            
 Logics:
            class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] op = new int[nums.length];
        boolean zero=false;
        int res=1;
        int index=0;
        for(int i=0;i<nums.length;i++) {        
            if(nums[i]==0) {
			  // it means second zero occurred hence return empty array
                if(zero) {
                    return op;
                }
				//else set index of zero element
                zero=true;
                index=i;
            } else {
			  //prepare product 
                res=res*nums[i];    
            }
            
        }
		//check single zero case
        if(zero) {
         op[index]=res;   
        } else { 
		// it means no zero present
            for(int i=0;i<nums.length;i++) {
                op[i]=res/nums[i];
            }
        }
        return op;
    }
}
